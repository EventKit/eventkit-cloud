stages:
  - pending
  - lint
  - test
  - results

variables:
  AWS_ACCESS_KEY_ID: AWS_ID
  AWS_ENDPOINT_URL: "http://minio:9000"
  AWS_SECRET_ACCESS_KEY: AWS_SECRET
  AWS_STORAGE_BUCKET_NAME: eventkit
  BASE_URL: "http://host.docker.internal:6080"
  BRANCH: "master"
  CURL_CA_BUNDLE: "./conda/cacert.pem"
  MOUNT_POINT: $CI_PROJECT_DIR
  NEXUS_BASE_URL: $NEXUS_BASE_URL
  NEXUS_REPO: "EventKit_eventkit"
  REQUESTS_CA_BUNDLE: "./conda/cacert.pem"
  SECRET_KEY: "TESTING"
  SITE_NAME: "host.docker.internal"
  SITE_IP: "127.0.0.1"
  VERSION: "1.14.0"

image:
  name: $DOCKER_IMAGE

.default:
  when: always

pending-tests:
  when: always
  stage: pending
  script:
    - python scripts/github.py pending "Waiting for tests."

.front:
  image: "${CI_REGISTRY_PATH}eventkit/eventkit-webpack:${VERSION}-0"
  before_script:
    - cd /var/lib/eventkit
  only:
    changes:
      - eventkit_cloud/ui/static/ui/**/*
      - config/**/*
      - package.json
      - .gitlab-ci.yml

.back_rules:
  only:
    changes:
      - conda/**/*
      - config/*
      - requirements.txt
      - requirements-dev.txt
      - eventkit_cloud/**/*
      - environment.yml
      - setup.py
      - setup.cfg
      - docker-compose.yml
      - .gitlab-ci.yml

.back:
  extends: .back_rules
  image:
    name: "${CI_REGISTRY_PATH}eventkit/eventkit-base:${VERSION}-0"
    entrypoint: [ "" ]
  variables:
    CURL_CA_BUNDLE: "./conda/cacert.pem"
    REQUESTS_CA_BUNDLE: "./conda/cacert.pem"
  before_script:
    - . activate conda_env
    - pip install -e .

.lint:
  stage: lint
  extends: .default


eslint:
  extends:
    - .front
    - .lint
  script:
    - npm run eslint

black:
  extends:
    - .back
    - .lint
  script:
    - black --check eventkit_cloud

isort:
  extends:
    - .back
    - .lint
  script:
    - isort eventkit_cloud

flake8:
  extends:
    - .back
    - .lint
  script:
    - flake8 eventkit_cloud

mypy:
  extends:
    - .back
    - .lint
  script:
    - mypy --no-incremental eventkit_cloud

migrations:
  extends:
    - .back
    - .lint
  script:
    - python manage.py makemigrations eventkit_cloud | grep -i "No changes detected"

.test:
  stage: test
  extends: .default

unit-back:
  extends:
    - .back_rules
    - .test
  tags:
    - dind
  script:
    - python scripts/ci_utils.py
    - mkdir -p exports_stage && chmod 777 exports_stage && chown -R 8800:880 . || echo $?
    - echo "id $AWS_ACCESS_KEY_ID url $AWS_ENDPOINT_URL secret $AWS_SECRET_ACCESS_KEY bucket $AWS_STORAGE_BUCKET_NAME"
    - docker-compose run --rm -T -e COVERAGE=True -e COVERAGE_THRESHOLD=68 eventkit python manage.py test -v=2 --noinput eventkit_cloud

unit-front:
  extends:
    - .front
    - .test
  script:
    - npm run coverage

# TODO: Add back after debugging connection issues in pipeline.
#integration-tests:
#  when: always
#  stage: test
#  tags:
#    - dind
#  script:
#    - python scripts/ci_utils.py
#    - docker-compose up -d --scale celery=3 && docker-compose stop flower map mkdocs || echo $?
#    - mkdir -p exports_stage && chmod 777 exports_stage exports_download && chown -R 8800:880 . || echo $?
#    - docker-compose exec -T eventkit "echo 'UID ${UID}'" || echo $?
#    - docker-compose exec -T eventkit bash -c 'source activate conda_env && python manage.py migrate'
#    - docker-compose exec -T eventkit bash -c 'source activate conda_env && python manage.py loaddata admin_user osm_provider datamodel_presets' || echo $?
#    - docker-compose exec -T eventkit bash -c 'source activate conda_env && python manage.py run_integration_tests'



pass-tests:
  when: on_success
  stage: results
  script:
    - python scripts/github.py success "All tests pass."

fail-tests:
  when: on_failure
  stage: results
  script:
    - python scripts/github.py failure "The pipeline failed."
