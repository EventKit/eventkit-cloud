stages:
  - pending
  - build
  - lint
  - test
  - results

variables:
  MOUNT_POINT: $CI_PROJECT_DIR
  BRANCH: "master"
  NEXUS_BASE_URL: $NEXUS_BASE_URL
  NEXUS_REPO: "EventKit_eventkit"
  BASE_URL: "http://cloud.eventkit.test:6080"
  SITE_NAME: "cloud.eventkit.test"
  SITE_IP: "127.0.0.1"
  SECRET_KEY: "TESTING"
  VERSION: "1.13.0"

image:
  name: $DOCKER_IMAGE

.default:
  when: always

pending-tests:
  when: always
  stage: pending
  script:
    - python scripts/github.py pending "Waiting for tests."

detect_changes:
  when: always
  stage: pending
  script:
    - git diff -s --exit-code master environment.yml requirements.txt requirements-dev.txt

build_deps:
  stage: build
  timeout: 3h
  tags:
    - dind
  script:
    - cd conda
    - docker-compose run --rm -T conda
    - >
      conda config --remove channels defaults && \
      conda config --add channels conda-forge && \
      conda config --add channels file://var/lib/eventkit/conda/repo && \
      # TODO: get build to work with strict priority
      conda config --set channel_priority flexible
    - conda env create --force --file environment.yml -n eventkit-cloud python=3.10 && pip install -r requirements-dev.txt
    - mkdir -p /home/eventkit/miniconda3/envs/
    - cp "$(which python | sed -e "s/bin\/python//")envs/eventkit-cloud" /home/eventkit/miniconda3/envs/eventkit-cloud
  artifacts:
    paths:
      - /home/eventkit/miniconda3/envs/eventkit-cloud
    expire_in: 4 hrs
  when: on_failure

.front:
  image: "${CI_REGISTRY_PATH}eventkit/eventkit-webpack:${VERSION}"
  before_script:
    - cd /var/lib/eventkit

.back:
  image:
    name: "${CI_REGISTRY_PATH}eventkit/eventkit-base:${VERSION}"
    entrypoint: [ "" ]
  before_script:
    - . activate eventkit-cloud

.lint:
  stage: lint
  extends: .default

eslint:
  extends:
    - .front
    - .lint
  script:
    - npm run eslint

black:
  extends:
    - .back
    - .lint
  script:
    - black --config config/pyproject.toml --check eventkit_cloud

isort:
  extends:
    - .back
    - .lint
  script:
    - isort eventkit_cloud --check

flake8:
  extends:
    - .back
    - .lint
  script:
    - flake8 --config config/setup.cfg eventkit_cloud

migrations:
  extends:
    - .back
    - .lint
  script:
    - python manage.py makemigrations eventkit_cloud | grep -i "No changes detected"


.test:
  stage: test
  extends: .default
  
unit-back:
  extends:
    - .test
  tags:
    - dind
  script:
    - python scripts/ci_utils.py
    - mkdir -p exports_stage exports_download && chmod 777 exports_stage exports_download && chown -R 8800:880 . || echo $?
    - docker-compose run --rm -T -e COVERAGE=True -e COVERAGE_THRESHOLD=68 eventkit python manage.py test -v=2 --noinput eventkit_cloud

unit-front:
  extends:
    - .front
    - .test
  script:
    - npm run coverage

# TODO: Add back after debugging connection issues in pipeline.
#integration-tests:
#  when: always
#  stage: test
#  tags:
#    - dind
#  script:
#    - python scripts/ci_utils.py
#    - docker-compose up -d --scale celery=3 && docker-compose stop flower map mkdocs || echo $?
#    - mkdir -p exports_stage exports_download && chmod 777 exports_stage exports_download && chown -R 8800:880 . || echo $?
#    - docker-compose exec -T eventkit "echo 'UID ${UID}'" || echo $?
#    - docker-compose exec -T eventkit bash -c 'source activate eventkit-cloud && python manage.py migrate'
#    - docker-compose exec -T eventkit bash -c 'source activate eventkit-cloud && python manage.py loaddata admin_user osm_provider datamodel_presets' || echo $?
#    - docker-compose exec -T eventkit bash -c 'source activate eventkit-cloud && python manage.py run_integration_tests'



pass-tests:
  when: on_success
  stage: results
  script:
    - python scripts/github.py success "All tests pass."

fail-tests:
  when: on_failure
  stage: results
  script:
    - python scripts/github.py failure "The pipeline failed."
